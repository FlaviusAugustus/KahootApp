@page "/quiz/{Id:guid}"
@using KahootFrontend.Models
@using KahootFrontend.Services
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<div class="d-flex flex-row h-100 w-100 justify-content-center overflow-hidden">
    <div class="col-2 card mx-2 d-flex flex-column border-0">
        <div alt="quiz cover" class="rounded rounded-1" style="height: 300px;  background: url(@_quiz?.ImageUrl) center; background-size: cover;"></div>
        <div class="p-3">
            <div><h3>@_quiz?.Title</h3></div>
            <div><p>@_quiz?.Description</p></div>
            <div class="btn btn-primary" @onclick="@Play">Play</div>
        </div>
    </div>
    <div class="d-flex flex-column mx-2 g-1 col-9">
        
        @if (_quiz is null)
        {
            <p>Loading</p>
        }
        else
        {
            <div class="d-flex flex-row justify-content-between align-items-center fw-bold">
                Questions(@_quiz.Questions.Count)
                <div class="btn btn-primary" @onclick=@ShowAnswers>Toggle Answers</div>
            </div>
            @foreach (var question in _quiz!.Questions)
            {
                <div class="d-flex flex-column" role="button" @onclick="@(() => TriggerAnswers(question.Id))">
                    <div class="d-flex flex-row card my-1 ps-3 align-items-center justify-content-between h-100 border-0" style="min-height: 100px">
                        @((MarkupString)question.Value)
                        <div class="col-1 h-100 rounded rounded-1" alt="question cover" style="background: url(@question?.ImageUrl) center; background-size: cover;"></div>
                    </div>
                </div>
                <div class="overflow-hidden card-shadow">
                    <div class="@(_visible[question.Id] ? "clicked" : "hidden")">
                        @foreach (var choice in question!.Choices)
                        { 
                            <li class="list-group-item border-0">
                                <div class="d-flex flex-row justify-content-between mx-3 align-items-center">
                                    @((MarkupString)choice.Answer)
                                    @if (choice.Correct)
                                    {
                                        <span class="text-center text-success">Correct</span> 
                                    }
                                    else
                                    {
                                        <span class="text-center text-danger">Not Correct</span>  
                                    } 
                                </div>
                            </li>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;

    private Dictionary<Guid, bool> _visible = new();

    private Quiz? _quiz;

    private void TriggerAnswers(Guid id)
    {
        _visible[id] = !_visible[id];
        StateHasChanged();
    }

    private void Play()
    {
        NavigationManager.NavigateTo($"/lobby/{Id.ToString()}");
    }

    private void ShowAnswers()
    {
        foreach (var key in _visible.Keys)
        {
            _visible[key] = !_visible[key];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadQuiz();
        foreach (var question in _quiz.Questions)
        {
            _visible[question.Id] = false;
        }
        StateHasChanged();
    }

    private async Task LoadQuiz() => 
        _quiz = await ApiService.Client.GetFromJsonAsync<Quiz>($"/api/quiz/get/{Id}");
}